// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CLIENT
}

model User {
  clerkId String @id

  name      String?
  firstname String?
  lastname  String?
  email     String?

  role Role @default(CLIENT)

  Booking Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id   String  @id @default(cuid())
  name String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Car Car[]
}

model Car {
  id   String  @id @default(cuid())
  name String?

  bodytype     String?
  transmission String?
  fuel         String?
  regno        String?
  capacity     String?
  kmsdriven    String?
  priceperhour String?
  image        String?

  fastag        Boolean @default(false)
  sunroof       Boolean @default(false)
  cruisecontrol Boolean @default(false)
  camera        Boolean @default(false)
  delivery      Boolean @default(false)
  airbags       Boolean @default(false)

  brand   Brand  @relation(fields: [brandId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  brandId String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Images    Images[]
  Reserve   Reserve[]
}

model Images {
  id String @id @default(cuid())

  image String?

  car   Car    @relation(fields: [carId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  carId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reserve {
  id String @id @default(cuid())

  start DateTime @db.Date
  end   DateTime @db.Date

  totalprice String?
  totalhours String?

  car   Car    @relation(fields: [carId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  carId String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Booking   Booking[]
}

model Booking {
  id String @id @default(cuid())

  orderId String?

  status Status @default(BOOKED)

  reserve   Reserve @relation(fields: [reserveId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reserveId String

  user   User   @relation(fields: [userId], references: [clerkId], onDelete: Cascade, onUpdate: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Status {
  LIVE
  COMPLETED
  BOOKED
  CANCELLED
}
